knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(2,2))
plot(lm.fit)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
x=rnorm(100)
y=2*x+rnorm(100)
lm.xy = lm(y~x+0)
summary(lm.xy)
lm.xy = lm(y~x+0)
summary(lm.xy)
lm.yx = lm(x~y+0)
summary(lm.yx)
n=100
((sqrt(n-1))*sum(x*y)) / (sqrt(sum(x*x) * sum(y*y)-sum(x*y)))
lm.yx = lm(x~y+0)
summary(lm.yx)
n=100
((sqrt(n-1))*sum(x*y)) / (sqrt(sum(x*x) * sum(y*y)-sum(x*y)^2))
lm.xy_intercept = lm(y~x)
summary(lm.xy_intercept)
lm.yx_intercept = lm(x~y)
summary(lm.yx_intercept)
cor(x1,x2)
plot(x1,x2)
set.seed(1)
x1=runif(100)
x2=0.5*x1+rnorm(100)/10
y=2+2*x1+0.3*x2+rnorm(100)
plot(x1,x2)
set.seed(1)
x1=runif(100)
x2=0.5*x1+rnorm(100)/10
y=2+2*x1+0.3*x2+rnorm(100)
plot(x1,x2)
lm.fit=lm(y~x1+x2)
lm.fit=lm(y~x1+x2)
summary(lm.fit)
lm.fit1=lm(y~x1)
summary(lm.fit1)
lm.fit2=lm(y~x2)
summary(lm.fit2)
x1=c(x1, 0.1)
x2=c(x2, 0.8)
y=c(y,6)
lm.redo=lm(y~x1+x2)
summary(lm.redo)
lm.redo1=lm(y~x1)
summary(lm.redo1)
lm.redo2=lm(y~x2)
summary(lm.redo2)
par(mfrow=c(2,2))
plot(lm.redo)
par(mfrow=c(2,2))
plot(lm.redo1)
par(mfrow=c(2,2))
plot(lm.redo2)
install.packages("rticles",type="source")
knitr::opts_chunk$set(echo = TRUE)
cor(Auto_mpg01)
cor(Auto)
cor(mpg01,Auto_mpg01)
cor(Auto)
names(Auto)
attach(Auto)
cor(Auto_mpg01[,-9])
library(ISLR)
attach(Auto)
mpg01 = rep(0,length(mpg))
mpg01[mpg>median(mpg)] = 1
Auto_mpg01 = data.frame(Auto,mpg01)
cor(Auto_mpg01[,-9])
library(ISLR)
attach(Auto)
mpg01 = rep(0,length(mpg))
mpg01[mpg>median(mpg)] = 1
Auto_mpg01 = data.frame(Auto,mpg01)
cor(Auto_mpg01[,-9])
pairs(Auto_mpg01)
train=(Year<2005)
train=(year<2005)
Auto_mpg01.2005=Auto_mpg01[!train,]
dim(Auto_mpg01.2005)
Auto_mpg01
train=(year<2005)
Auto_mpg01.2005=Auto_mpg01[!train,]
dim(Auto_mpg01.2005)
train=(year<80)
Auto_mpg01.2005=Auto_mpg01[!train,]
dim(Auto_mpg01.2005)
lda.fit(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
lda.fit = lda(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
library(MASS)
lda.fit = lda(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
lda.fit
lda.pred=predict(lda.fit,Auto.test)
train=(year<80)
test = !train
Auto.train=Auto[train,]
Auto.test=Auto[test,]
mpg01.test=mpg01[test]
library(MASS)
lda.fit = lda(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
lda.fit
lda.pred=predict(lda.fit,Auto.test)
mean(lda.pred$class != mpg01.test)
qda.fit=qda(mpg01~cyliners+displacement+weight,data=Auto,subset=train)
qda.fit=qda(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
qda.fit
qda.pred=predict(qda.fit,Auto.test)
mean(qda.pred$class!=mpg01.test)
glm.fit=glm(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
glm.fit
glm.pred=predict(glm.fit,Auto.test)
mean(glm.pred$class!=mpg01.test)
glm.fit=glm(mpg01~cylinders+displacement+weight,data=Auto,subset=train)
glm.fit
glm.pred=predict(glm.fit,Auto.test)
mean(glm.pred!=mpg01.test)
glm.fit=glm(mpg01~cylinders+displacement+weight,data=Auto,family=binomial,subset=train)
glm.fit
glm.probs=predict(glm.fit,Auto.test,type="respone")
glm.fit=glm(mpg01~cylinders+displacement+weight,data=Auto,family=binomial,subset=train)
glm.fit
glm.probs=predict(glm.fit,Auto.test,type="response")
glm.pred = rep(0,length(glm.probs))
mean(glm.pred!=mpg01.test)
glm.fit=glm(mpg01~cylinders+displacement+weight,data=Auto,family=binomial,subset=train)
glm.fit
glm.probs=predict(glm.fit,Auto.test,type="response")
glm.pred = rep(0,length(glm.probs))
glm.pred[glm.probs>0.5] = 1
mean(glm.pred!=mpg01.test)
library(class)
library(class)
train.X = cbind(cyliners,displacement,weight)[train,]
library(class)
train.X = cbind(cylinders,displacement,weight)[train,]
test.X=cbind(cylinders,displacement,weight)[!train,]
train.mpg01 = mpg01[train]
set.seed(1)
knn.pred=knn(train.X,test.X,train.mpo01,k=1)
knn.pred=knn(train.X,test.X,train.mpo01,k=1)
knn.pred=knn(train.X,test.X,train.mpg01,k=1)
mean(knn.pred != mpg01.test)
knn.pred=knn(train.X,test.X,train.mpg01,k=10)
mean(knn.pred != mpg01.test)
knn.pred=knn(train.X,test.X,train.mpg01,k=100)
mean(knn.pred != mpg01.test)
library(class)
train.X = cbind(cylinders,displacement,weight)[train,]
test.X=cbind(cylinders,displacement,weight)[!train,]
train.mpg01 = mpg01[train]
set.seed(1)
knn.pred=knn(train.X,test.X,train.mpg01,k=1)
mean(knn.pred != mpg01.test)
knn.pred=knn(train.X,test.X,train.mpg01,k=10)
mean(knn.pred != mpg01.test)
knn.pred=knn(train.X,test.X,train.mpg01,k=100)
mean(knn.pred != mpg01.test)
knitr::opts_chunk$set(echo = TRUE)
library(class)
train.X = cbind(cylinders,displacement,weight)[train,]
knitr::opts_chunk$set(echo = TRUE)
probability = function(n) return(1 - (1 - 1/n)^n)
x = 1:100000
plot(x, probability(x))
store=rep(NA, 10000) > for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0 }
store=rep(NA, 10000) > for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0
}
store=rep(NA, 10000)
for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0
}
mean(store)
library(ISLR)
attach(Default)
set.seed(1)
glm.fit=glm(default~income+balance, data=Default, family=train)
library(ISLR)
attach(Default)
set.seed(1)
glm.fit=glm(default~income+balance, data=Default, family=binomial)
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.train = glm(default~income+balance, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep(0,length(glm.probs))
glm.pred[glm.probs>0.5] = 1
mean(glm.pred!=Default[-train,]$default)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = 1
mean(glm.pred!=Default[-train,]$default)
train1 = sample(dim(Default)[1], dim(Default)[1]/3)
glm.train1 = glm(default~income+balance, data=Default, family=binomial, subset=train1)
glm.probs1=predict(glm.trai1n,Default[-train1],type="response")
train1 = sample(dim(Default)[1], dim(Default)[1]/3)
glm.train1 = glm(default~income+balance, data=Default, family=binomial, subset=train1)
glm.probs1=predict(glm.train1,Default[-train1],type="response")
glm.pred1 = rep("No",length(glm.probs1))
glm.pred1[glm.probs1>0.5] = 1
mean(glm.pred1!=Default[-train1,]$default)
train2 = sample(dim(Default)[1], dim(Default)[1]/4)
glm.train2 = glm(default~income+balance, data=Default, family=binomial, subset=train2)
glm.probs2=predict(glm.train2,Default[-train2],type="response")
glm.pred2 = rep("No",length(glm.probs2))
glm.pred2[glm.probs2>0.5] = 1
mean(glm.pred2!=Default[-train2,]$default)
train2 = sample(dim(Default)[1], dim(Default)[1]/5)
glm.train3 = glm(default~income+balance, data=Default, family=binomial, subset=train3)
train3 = sample(dim(Default)[1], dim(Default)[1]/5)
glm.train3 = glm(default~income+balance, data=Default, family=binomial, subset=train3)
glm.probs3=predict(glm.train3,Default[-train3],type="response")
glm.pred3 = rep("No",length(glm.probs3))
glm.pred3[glm.probs3>0.5] = 1
mean(glm.pred3!=Default[-train3,]$default)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = "Yes"
mean(glm.pred!=Default[-train,]$default)
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.train = glm(default~income+balance, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = "Yes"
mean(glm.pred!=Default[-train,]$default)
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.train = glm(default~income+balance, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = "Yes"
mean(glm.pred!=Default[-train,]$default)
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.train = glm(default~income+balance, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = "Yes"
mean(glm.pred!=Default[-train,]$default)
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.train = glm(default~income+balance+student, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = "Yes"
mean(glm.pred!=Default[-train,]$default)
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.train = glm(default~income+balance+student, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.train,Default[-train],type="response")
glm.pred = rep("No",length(glm.probs))
glm.pred[glm.probs>0.5] = "Yes"
mean(glm.pred!=Default[-train,]$default)
attach(Weekly)
glm.fit = glm(Direction~Lag1+Lag2,data=Weekly,family=binomial)
attach(Weekly)
set.seed(1)
glm.fit = glm(Direction~Lag1+Lag2,data=Weekly,family=binomial)
attach(Weekly)
set.seed(1)
glm.fit = glm(Direction~Lag1+Lag2,data=Weekly,family=binomial)
glm.fit1 = glm(Direction~Lag1+Lag2,data=Weekly[-1,],family=binomial)
predict.glm(glm.fit1,Weekly[1,],type="response") > 0.5
count = rep(0,dim(Weekly)[1])
for (i in 1:dim(Weekly)[1]{
count = rep(0,dim(Weekly)[1])
for (i in 1:dim(Weekly)[1]){
glm.fit = glm(Direction~Lag1+Lag2,data=Weekly[-i,],family=binomial)
up = predict.glm(glm.fit1,Weekly[i,],type="response") > 0.5
prob = Weekly[i,]$Direction == 'Up'
if (up!=prob)
count[i] = 1
}
sum(count)
mean(count)
set.seed(1)
y=rnorm(100)
x=rnorm(100)
y=x-2*x^2+rnorm(100)
plot(x,y)
library(boot)
D = data.frame(x,y)
set.seed(1)
glm.fit(y~x)
library(boot)
Data = data.frame(x,y)
set.seed(1)
glm.fit(y~x)
library(boot)
Data = data.frame(x,y)
set.seed(1)
glm.fit(y~x)
library(boot)
Data = data.frame(x,y)
set.seed(1)
glm.fit(y~x)
set.seed(1)
y=rnorm(100)
x=rnorm(100)
y=x-2*x^2+rnorm(100)
glm.fit(y~x)
library(boot)
Data = data.frame(x,y)
set.seed(1)
glm.fit = glm(y~x)
cv.glm(Data,glm.fit)$delta
glm.fit1 = glm(y~poly(x,2))
cv.glm1(D,glm.fit1)$delta
glm.fit1 = glm(y~poly(x,2))
cv.glm(D,glm.fit1)$delta
glm.fit2 = glm(y~poly(x,3))
cv.glm(D,glm.fit2)$delta
glm.fit3 = glm(y~poly(x,4))
cv.glm(D,glm.fit3)$delta
library(boot)
Data = data.frame(x,y)
set.seed(5)
glm.fit = glm(y~x)
cv.glm(Data,glm.fit)$delta
glm.fit1 = glm(y~poly(x,2))
cv.glm(D,glm.fit1)$delta
glm.fit2 = glm(y~poly(x,3))
cv.glm(D,glm.fit2)$delta
glm.fit3 = glm(y~poly(x,4))
cv.glm(D,glm.fit3)$delta
set.seed(10)
glm.fit = glm(y~x)
cv.glm(Data,glm.fit)$delta
glm.fit1 = glm(y~poly(x,2))
cv.glm(D,glm.fit1)$delta
glm.fit2 = glm(y~poly(x,3))
cv.glm(D,glm.fit2)$delta
glm.fit3 = glm(y~poly(x,4))
cv.glm(D,glm.fit3)$delta
summary(glm.fit)
library(boot)
Data = data.frame(x,y)
set.seed(1)
glm.fit = glm(y~x)
cv.glm(Data,glm.fit)$delta
glm.fit = glm(y~poly(x,2))
cv.glm(D,glm.fit)$delta
glm.fit = glm(y~poly(x,3))
cv.glm(D,glm.fit)$delta
glm.fit = glm(y~poly(x,4))
cv.glm(D,glm.fit)$delta
summary(glm.fit)
summary(glm.fit)
library(boot)
Data = data.frame(x,y)
set.seed(1)
glm.fit = glm(y~x)
cv.glm(Data,glm.fit)$delta
glm.fit = glm(y~poly(x,2))
cv.glm(D,glm.fit)$delta
glm.fit = glm(y~poly(x,3))
cv.glm(D,glm.fit)$delta
glm.fit = glm(y~poly(x,4))
cv.glm(D,glm.fit)$delta
library(boot)
D = data.frame(x,y)
set.seed(1)
glm.fit = glm(y~x)
cv.glm(Data,glm.fit)$delta
glm.fit = glm(y~poly(x,2))
cv.glm(D,glm.fit)$delta
glm.fit = glm(y~poly(x,3))
cv.glm(D,glm.fit)$delta
glm.fit = glm(y~poly(x,4))
cv.glm(D,glm.fit)$delta
set.seed(10)
glm.fit = glm(y~x)
cv.glm(D,glm.fit)$delta
glm.fit1 = glm(y~poly(x,2))
cv.glm(D,glm.fit1)$delta
glm.fit2 = glm(y~poly(x,3))
cv.glm(D,glm.fit2)$delta
glm.fit3 = glm(y~poly(x,4))
cv.glm(D,glm.fit3)$delta
