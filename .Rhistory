bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
knitr::opts_chunk$set(echo = TRUE)
library(leaps)
attach(Boston)
library(leaps)
attach("Boston")
library(leaps)
library(MASS)
attach(Boston)
view(Boston)
library(leaps)
library(MASS)
attach(Boston)
regfit.full <- regsubsets(crim~.,Boston,nvmax=14)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
library(leaps)
library(MASS)
attach(Boston)
regfit.full <- regsubsets(crim~.,Boston)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,8)
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NM, k, 14, dimnames = list(NULL,paste(1:14)))
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NA, k, 14, dimnames = list(NULL,paste(1:14)))
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Bsoton[folds != j], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NA, k, 14, dimnames = list(NULL,paste(1:14)))
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=13)
for (i in 1:13) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NA, k, 13, dimnames = list(NULL,paste(1:13)))
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=13)
for (i in 1:13) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
mean_cv_errors <- colMeans(cv_errors)
plot(mean_cv_errors,type="b")
final_best <- regsubsets(crim~.,data=Boston,nvmax=13)
coef(final_best,11)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- college[train,]
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-crim.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-crim.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out <- glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)
mean(crim)
train <- (crim<3.6)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-crim.test)^2)
out <- glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)
mean(crim)
train <- (crim<3.6)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
knitr::opts_chunk$set(echo = TRUE)
attach(Auto)
install.packages(ISLR)
library(ISLR)
install.packages("ISLR")
library(ISLR)
attach(Auto)
summary(Auto)
library(ISLR)
attach(Auto)
summary(Auto)
fit = lm(mpg~poly(.,4),data=Auto)
fit = lm(mpg~poly(cylinders,4),data=Auto)
coef(summary(fit))
fit = lm(mpg~poly(cylinders,4,raw=T),data=Auto)
coef(summary(fit))
cyllims <- range(cynlinders)
cyllims <- range(cylinders)
cylinders.grid <- seq(from=cyllims[1],to=cyllims[2])
preds <- predict(fit,newdata=list(cylinders=cylinders.grid),se=TRUE)
se.bands <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(cylinders,mpg,xlim=cyllims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(cylinders.grid,preds$fit,lwd=2,col="blue")
matline(mpg.grid,se.bands,lwd=1,col="blue,lty=3)
cyllims <- range(cylinders)
cylinders.grid <- seq(from=cyllims[1],to=cyllims[2])
preds <- predict(fit,newdata=list(cylinders=cylinders.grid),se=TRUE)
se.bands <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(cylinders,mpg,xlim=cyllims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(cylinders.grid,preds$fit,lwd=2,col="blue")
matlines(mpg.grid,se.bands,lwd=1,col="blue,lty=3)
cyllims <- range(cylinders)
cylinders.grid <- seq(from=cyllims[1],to=cyllims[2])
preds <- predict(fit,newdata=list(cylinders=cylinders.grid),se=TRUE)
se.bands <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(cylinders,mpg,xlim=cyllims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(cylinders.grid,preds$fit,lwd=2,col="blue")
matlines(mpg.grid,se.bands,lwd=1,col="blue",lty=3)
cyllims <- range(cylinders)
cylinders.grid <- seq(from=cyllims[1],to=cyllims[2])
preds <- predict(fit,newdata=list(cylinders=cylinders.grid),se=TRUE)
se.bands <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(cylinders,mpg,xlim=cyllims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(cylinders.grid,preds$fit,lwd=2,col="blue")
matlines(cylinders.grid,se.bands,lwd=1,col="blue",lty=3)
fit.1=lm(mpg∼cylinders,data=Auto)
fit.1<-lm(mpg∼cylinders,data=Auto)
fit.1<-lm(mpg∼cylinders,data=Auto)
fit.1<-lm(mpg~cylinders,data=Auto)
fit.2<-lm(mpg~poly(cylinders,2),data=Auto)
fit.3<-lm(mpg~poly(cylinders,3),data=Auto)
fit.4<-lm(mpg~poly(cylinders,4),data=Auto)
fit.5<-lm(mpg~poly(cylinders,5),data=Auto)
fit.1<-lm(mpg~cylinders,data=Auto)
fit.2<-lm(mpg~poly(cylinders,2),data=Auto)
fit.3<-lm(mpg~poly(cylinders,3),data=Auto)
fit.4<-lm(mpg~poly(cylinders,4),data=Auto)
anova(fit.1,fit.2,fit.3,fit.4)
fit.1<-lm(mpg~cylinders,data=Auto)
fit.2<-lm(mpg~poly(cylinders,2),data=Auto)
fit.3<-lm(mpg~poly(cylinders,3),data=Auto)
fit.4<-lm(mpg~poly(cylinders,4),data=Auto)
anova(fit.1,fit.2,fit.3,fit.4)
fit.1<-lm(mpg~horsepower+cylinders,data=Auto)
fit.2<-lm(mpg~horsepower+poly(cylinders,2),data=Auto)
fit.3<-lm(mpg~horsepower+poly(cylinders,3),data=Auto)
fit.4<-lm(mpg~horsepower+poly(cylinders,4),data=Auto)
anova(fit.1,fit.2,fit.3,fit.4)
fit.1<-lm(mpg~horsepower+weight,data=Auto)
fit.2<-lm(mpg~horsepower+poly(weight,2),data=Auto)
fit.3<-lm(mpg~horsepower+poly(weight,3),data=Auto)
fit.4<-lm(mpg~horsepower+poly(weight,4),data=Auto)
anova(fit.1,fit.2,fit.3,fit.4)
mpg
mean(mpg)
fit=glm(I(mpg>20)∼horsepower+poly(weight,4),data=Auto,family=binomial)
fit<-glm(I(mpg>20)∼horsepower+poly(weight,4),data=Auto,family=binomial)
fit<-glm(I(mpg>20)~horsepower+poly(weight,4),data=Auto,family=binomial)
pred<-predict(fit,newdata=list(horsepower=horsepower.grid,weight=weight.grid),se=T)
fit<-glm(I(mpg>20)~horsepower+poly(weight,4),data=Auto,family=binomial)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
weightlims <- range(weight)
weight.grid <- seq(from=weightlims[1],to=horselims[2])
pred<-predict(fit,newdata=list(horsepower=horsepower.grid,weight=weight.grid),se=T)
fit<-glm(I(mpg>20)~horsepower,data=Auto,family=binomial)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),se=T)
fit<-glm(I(mpg>20)~horsepower,data=Auto,family=binomial)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
pfit <- exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands <- exp(se.bands.logit)/(1+exp(se.bands.logit))
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),type="response",se=T)
fit<-glm(I(mpg>20)~horsepower,data=Auto,family=binomial)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
pfit <- exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands <- exp(se.bands.logit)/(1+exp(se.bands.logit))
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),type="response",se=T)
plot(horsepower, I(mpg>20),xlim=horselims,type="n",ylim=c(0,.2))
points(jitter(horsepower),I((mpg>20)/5),cex=.5,pch="|",col="darkgrey")
lines(horsepower.grid,pfit,lwd=2,col="blue")
fit<-glm(I(mpg>20)~horsepower,data=Auto,family=binomial)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
pfit <- exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands <- exp(se.bands.logit)/(1+exp(se.bands.logit))
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),type="response",se=T)
plot(horsepower, I(mpg>20),xlim=horselims,type="n",ylim=c(0,.2))
points(jitter(horsepower),I((mpg>20)/5),cex=.5,pch="|",col="darkgrey")
#lines(horsepower.grid,pfit,lwd=2,col="blue")
matlines(horsepower.grid,se.bands,lwd=1,col="blue",lty=3)
fit<-glm(I(mpg>20)~horsepower,data=Auto,family=binomial)
preds<-predict(fit,newdata=list(horsepower=horsepower.grid),se=T)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
pfit <- exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands <- exp(se.bands.logit)/(1+exp(se.bands.logit))
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),type="response",se=T)
plot(horsepower, I(mpg>20),xlim=horselims,type="n",ylim=c(0,.2))
points(jitter(horsepower),I((mpg>20)/5),cex=.5,pch="|",col="darkgrey")
#lines(horsepower.grid,pfit,lwd=2,col="blue")
matlines(horsepower.grid,se.bands,lwd=1,col="blue",lty=3)
fit<-glm(I(mpg>20)~horsepower,data=Auto,family=binomial)
preds<-predict(fit,newdata=list(horsepower=horsepower.grid),se=T)
horselims <- range(horsepower)
horsepower.grid <- seq(from=horselims[1],to=horselims[2])
pfit <- exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit <- cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands <- exp(se.bands.logit)/(1+exp(se.bands.logit))
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),type="response",se=T)
plot(horsepower, I(mpg>20),xlim=horselims,type="n",ylim=c(0,.2))
points(jitter(horsepower),I((mpg>20)/5),cex=.5,pch="|",col="darkgrey")
lines(horsepower.grid,pfit,lwd=2,col="blue")
matlines(horsepower.grid,se.bands,lwd=1,col="blue",lty=3)
table(cut(horsepower,4))
fit<-lm(mpg~cut(horsepower,4),data=Auto)
coef(summary(fit))
library(splines)
fit<-lm(mpg~bs(horsepower,knots<-c(25,40,60)),data=Auto)
pred<-predict(fit,newdata=list(age=age.grid),se=T)
library(splines)
fit<-lm(mpg~bs(horsepower,knots<-c(25,40,60)),data=Auto)
pred<-predict(fit,newdata=list(horsepower=horsepower.grid),se=T)
plot(mpg,horsepower,col="gray")
lines(horsepower.grid,pred$fit,lwd=2)
lines(horsepower.grid,pred$fit+2*pred$se,lty="dashed")
lines(horsepower.grid,pred$fit-2*pred$se,lty="dashed")
dim(bs(horsepower,knots=c(45,110,160)))
dim(bs(horsepower,df=6))
attr(bs(horsepower,df=6),"knots")
fit2<-lm(mpg~ns(horsepower,df=4),data=Auto)
pred2<-predict(fit2,newdata=list(horsepower=horsepower.grid),se=T)
lines(horsepower.grid,pred2$fit,col="red",lwd=2)
fit2<-lm(mpg~ns(horsepower,df=4),data=Auto)
pred2<-predict(fit2,newdata=list(horsepower=horsepower.grid),se=T)
plot.new
lines(horsepower.grid,pred2$fit,col="red",lwd=2)
fit2<-lm(mpg~ns(horsepower,df=4),data=Auto)
pred2<-predict(fit2,newdata=list(horsepower=horsepower.grid),se=T)
#lines(horsepower.grid,pred2$fit,col="red",lwd=2)
plot(horsepower,mpg,xlim=horseims,cex=.5),col="darkgrey")
plot(horsepower,mpg,xlim=horseims,cex=.5,col="darkgrey")
plot(horsepower,mpg,xlim=horselims,cex=.5,col="darkgrey")
title("Smoothing Spline")
fit<-smooth.spline(horsepower,mpg,df=16)
fit2<-smooth.spline(horsepower,mpg,cv=TRUE)
fit2$df
lines(fit,col="red",lwd=2)
plot(horsepower,mpg,xlim=horselims,cex=.5,col="darkgrey")
title("Smoothing Spline")
fit<-smooth.spline(horsepower,mpg,df=16)
fit2<-smooth.spline(horsepower,mpg,cv=TRUE)
fit2$df
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright",legend=c("16 DF","6.8 DF"),
col=c("red","blue"),lty=1,lwd=2,cex=.8)
plot(horsepower,mog,xlim=horselims,cex=.5,col="darkgrey")
plot(horsepower,mpg,xlim=horselims,cex=.5,col="darkgrey")
title("Local Regression")
fit<-loess(mpg~horsepower,span=.2,data=Auto)
fit2<-loess(mpg~horsepower,span=.5,data=Auto)
lines(horsepower.grid,predict(fit,data.frame(horsepower=horsepower.grid)),
col="red",lwd=2)
lines(horsepower.grid,predict(fit2,data.frame(horsepower=horsepower.grid)),
col="blue",lwd=2)
legend("topright",legend=c("Span=0.2","Span=0.5"),
col=c("red","blue"),lty=1,lwd=2,cex=.8)
gam1<-lm(mpg~ns(weight,4)+ns(horsepower,5)+cylinders,data=Auto)
library(gam)
gam1<-lm(mpg~ns(weight,4)+ns(horsepower,5)+cylinders,data=Auto)
install.packages("gam")
library(gam)
gam.m3=gam(mpg~s(weight,4)+s(horsepower,5)+cylinders,data=Auto)
par(mfrow=c(1,3))
plot(gam.m3,se=TRUE,col="blue")
plot.gam(gam1,se=TRUE,col="red")
library(gam)
plot.gam(gam1,se=TRUE,col="red")
summary(gam.m3)
library(sparklyr)
spark.install(version = "2.1.0")
spark_install(version = "2.1.0")
devtools::install_github("rstudio/sparklyr")
library(sparklyr)
sc <- spark_connect(master = "local")
install.packages(c("nycflights13","Lahman"))
library(dplyr)
iris_tbl <- copy_to(sc,iris)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights")
battling_tbl <- copy_to(sc, Lahman::Batting, "batting")
src_tbls(sc)
flights_tbl %>% fliter(dep_delay == 2)
flights_tbl %>% filter(dep_delay == 2)
data <- read.table("/project_data_cleaning/ratings_1_sample.csv", header=TRUE, sep=",", row.names=c("Customer ID", "Rating", "Date", "MovieID", "MovieTitle", "Release Year"))
setwd("/Users/caitlynralph/Downloads/caitlyn_rmachinelearning")
data <- read.table("/project_data_cleaning/ratings_1_sample.csv", header=TRUE, sep=",", row.names=c("Customer ID", "Rating", "Date", "MovieID", "MovieTitle", "Release Year"))
data <- read.table("/project_data_cleaning/ratings_1_sample", header=TRUE, sep=",", row.names=c("Customer ID", "Rating", "Date", "MovieID", "MovieTitle", "Release Year"))
setwd("/Users/caitlynralph/Downloads/caitlyn_rmachinelearning/project_data_cleaning")
data <- read.table("ratings_1_sample", header=TRUE, sep=",", row.names=c("Customer ID", "Rating", "Date", "MovieID", "MovieTitle", "Release Year"))
data <- read.table("ratings_1_sample.csv", header=TRUE, sep=",", row.names=c("Customer ID", "Rating", "Date", "MovieID", "MovieTitle", "Release Year"))
data <- read.table("ratings_1_sample.csv", header=TRUE, sep=",")
data <- read.table("ratings_1_sample.csv", header=TRUE, sep=",", row.names=c("Customer ID", "Rating", "Date", "MovieID", "MovieTitle", "Release Year"))
