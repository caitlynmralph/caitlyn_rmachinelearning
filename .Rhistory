bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
fix(College)
fix(College)
view(College)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college=college[,-1]
fix(college)
View(college)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college=college[,-1]
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college=college[,-1]
attach(college)
mean(Apps)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college <- college[,-1]
attach(college)
mean(Apps)
train <- (Apps<3000)
test <- !train
College.train <- college[train,]
College.test <- college[test,]
lm.fit=lm(Apps~.,data=College.train)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college <- college[,-1]
attach(college)
mean(Apps)
train <- (Apps<3000)
test <- !train
college.train <- college[train,]
college.test <- college[test,]
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college <- college[,-1]
attach(college)
mean(Apps)
train <- (Apps<3000)
test <- !train
college.train <- college[train,]
college.test <- college[test,]
Apps.test=Apps[test]
lm.fit=lm(Apps~.,data=college,subset=train)
lm.fit
lm.pred=predict(lm.fit,college.test)
mean(lm.pred$class != Apps.test)
lm.fit=lm(Apps~.,data=college,subset=train)
lm.fit
lm.pred=predict(lm.fit,college.test)
mean(lm.pred != Apps.test)
x<-model.matrix(Apps~.,college)[,-1]
y<-college$Apps
library(glmnet)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
library(glmnet)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
library(glmnet)
lasso.mod=glmnet(x,y,alpha=1,lambda=grid)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
x<-model.matrix(Y~poly(X,10,raw=T),d)[,-1]
y<-d$Y
library(glmnet)
lasso.mod=glmnet(x,y,alpha=1,lambda=grid)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
x<-model.matrix(Apps~.,college)[,-1]
y<-college$Apps
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out <- glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)
x<-model.matrix(Apps~.,college)[,-1]
y<-college$Apps
library(glmnet)
grid=10^seq(10,-2,length=100)
lasso.mod=glmnet(x,y,alpha=1,lambda=grid)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
library(pls)
install.packages(pls)
library(pls)
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit=pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
library(pls)
set.seed(2)
pcr.fit=pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
library(pls)
set.seed(2)
pcr.fit=pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit = pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=5)
summary(pcr.fit)
set.seed(1)
pls.fit <- pslr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
set.seed(1)
pls.fit <- plsr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
summary(pls.fit)
set.seed(1)
pls.fit <- plsr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
summary(pls.fit)
pls.pred <- predict(pls.fit,x[test,],ncomp=10)
mean((pls.pred-y.test)^2)
set.seed(1)
pls.fit <- plsr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
summary(pls.fit)
pls.pred <- predict(pls.fit,x[test,],ncomp=10)
mean((pls.pred-y.test)^2)
pls.fit=plsr(Apps~.,data=college,scale=TRUE,ncomp=10)
summary(pls.fit)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=5)
summary(pcr.fit)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=5)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=12)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=12)
summary(pcr.fit)
lm.fit=lm(Apps~.,data=college,subset=train)
lm.fit
lm.pred=predict(lm.fit,college.test)
mean(lm.pred != Apps.test)
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
knitr::opts_chunk$set(echo = TRUE)
library(leaps)
attach(Boston)
library(leaps)
attach("Boston")
library(leaps)
library(MASS)
attach(Boston)
view(Boston)
library(leaps)
library(MASS)
attach(Boston)
regfit.full <- regsubsets(crim~.,Boston,nvmax=14)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
library(leaps)
library(MASS)
attach(Boston)
regfit.full <- regsubsets(crim~.,Boston)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,8)
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NM, k, 14, dimnames = list(NULL,paste(1:14)))
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NA, k, 14, dimnames = list(NULL,paste(1:14)))
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Bsoton[folds != j], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NA, k, 14, dimnames = list(NULL,paste(1:14)))
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=14)
for (i in 1:14) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=13)
for (i in 1:13) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Boston), replace=TRUE)
cv_errors <- matrix(NA, k, 13, dimnames = list(NULL,paste(1:13)))
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
for(j in 1:k) {
best_subset <- regsubsets(crim~.,Boston[folds != j, ], nvmax=13)
for (i in 1:13) {
pred_x <- predict.regsubsets(best_subset, Boston[folds == j,], id=i)
cv_errors[j,i] <- mean((Boston$crim[folds==j] - pred_x)^2)
}
}
mean_cv_errors <- colMeans(cv_errors)
plot(mean_cv_errors,type="b")
final_best <- regsubsets(crim~.,data=Boston,nvmax=13)
coef(final_best,11)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- college[train,]
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-crim.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-crim.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean(crim)
train <- (crim<3000)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out <- glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)
mean(crim)
train <- (crim<3.6)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
x<-model.matrix(crim~.,Boston)[,-1]
y<-Boston$crim
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-crim.test)^2)
out <- glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)
mean(crim)
train <- (crim<3.6)
test <- !train
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
crim.test=crim[test]
