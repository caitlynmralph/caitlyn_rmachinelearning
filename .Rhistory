max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,max_adjr2)
coef(regfit.full,min_cp)
coef(regfit.full,min_bic)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10,method="backward")
library(leaps)
d <- data.frame(X,Y)
dim(d)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,3)
set.seed(1)
X <- rnorm(100)
e <- rnorm(100)
Y <- 10 + 15*X + 20*X^2 + 30*X^3 + e
library(leaps)
d <- data.frame(X,Y)
dim(d)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,3)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10,method="forward")
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,max_adjr2)
coef(regfit.full,min_cp)
coef(regfit.full,min_bic)
coef(regfit.full,3)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10,method="backward")
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
x<-model.matrix(Y~.,d)[,-1]
y<-d$Y
library(glmnet)
library(glmnet)
grid=10^seq(10,-2,length=100)
lasso.mod = gtlmnet(x,y,alpha=1,lamda=grid)
library(glmnet)
grid=10^seq(10,-2,length=100)
lasso.mod = glmnet(x,y,alpha=1,lamda=grid)
library(glmnet)
grid=10^seq(10,-2,length=100)
lasso.mod = glmnet(x,y,alpha=1)
library(glmnet)
grid <- 10^seq(10,-2,length=100)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
x<-model.matrix(Y~.,d)[,-1]
y<-d$Y
library(glmnet)
grid <- 10^seq(10,-2,length=100)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
library(glmnet)
grid <- 10^seq(10,-2,length=100)
dim(x)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
x<-model.matrix(Y~poly(X,10,raw=T),d)[,-1]
y<-d$Y
library(glmnet)
grid <- 10^seq(10,-2,length=100)
dim(x)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lamda=grid)
library(glmnet)
grid <- 10^seq(10,-2,length=100)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lamda=grid)
library(glmnet)
grid <- 10^seq(10,-2,length=100)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
lasso.pred <- predict(lasso.mod,s=4,newx=[test,])
library(glmnet)
grid <- 10^seq(10,-2,length=100)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
lasso.pred <- predict(lasso.mod,s=4,newx=x[test,])
mean((lasso.pred-y.test)^2)
library(glmnet)
grid <- 10^seq(10,-2,length=100)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)[1:20,]
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
Y <- 10 + 75*X^7 + e
library(leaps)
d <- data.frame(X,Y)
dim(d)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,3)
Y <- 10 + 25*X^7 + e
library(leaps)
d <- data.frame(X,Y)
dim(d)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10)
Y <- 10 + 25*X^7 + e
library(leaps)
d <- data.frame(X,Y)
dim(d)
regfit.full <- regsubsets(Y~poly(X,10,raw=T), d,nvmax=10)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2, reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type="l")
min_cp <- which.min(reg.summary$cp)
points(min_cp, reg.summary$cp[min_cp], col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,3)
coef(regfit.full,2)
coef(regfit.full,2)
x<-model.matrix(Y~poly(X,10,raw=T),d)[,-1]
y<-d$Y
library(glmnet)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
fix(College)
fix(College)
view(College)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college=college[,-1]
fix(college)
View(college)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college=college[,-1]
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college=college[,-1]
attach(college)
mean(Apps)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college <- college[,-1]
attach(college)
mean(Apps)
train <- (Apps<3000)
test <- !train
College.train <- college[train,]
College.test <- college[test,]
lm.fit=lm(Apps~.,data=College.train)
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college <- college[,-1]
attach(college)
mean(Apps)
train <- (Apps<3000)
test <- !train
college.train <- college[train,]
college.test <- college[test,]
college <- read.csv("College.csv", header=T, na.strings="?")
rownames(college)=college[,1]
college <- college[,-1]
attach(college)
mean(Apps)
train <- (Apps<3000)
test <- !train
college.train <- college[train,]
college.test <- college[test,]
Apps.test=Apps[test]
lm.fit=lm(Apps~.,data=college,subset=train)
lm.fit
lm.pred=predict(lm.fit,college.test)
mean(lm.pred$class != Apps.test)
lm.fit=lm(Apps~.,data=college,subset=train)
lm.fit
lm.pred=predict(lm.fit,college.test)
mean(lm.pred != Apps.test)
x<-model.matrix(Apps~.,college)[,-1]
y<-college$Apps
library(glmnet)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
library(glmnet)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
library(glmnet)
lasso.mod=glmnet(x,y,alpha=1,lambda=grid)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
x<-model.matrix(Y~poly(X,10,raw=T),d)[,-1]
y<-d$Y
library(glmnet)
lasso.mod=glmnet(x,y,alpha=1,lambda=grid)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
x<-model.matrix(Apps~.,college)[,-1]
y<-college$Apps
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out <- glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)
x<-model.matrix(Apps~.,college)[,-1]
y<-college$Apps
library(glmnet)
grid=10^seq(10,-2,length=100)
lasso.mod=glmnet(x,y,alpha=1,lambda=grid)
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test <- (-train)
y.test <- y[test]
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
lasso.pred <- predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
out <- glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=bestlam)
library(pls)
install.packages(pls)
library(pls)
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit=pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
library(pls)
set.seed(2)
pcr.fit=pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
library(pls)
set.seed(2)
pcr.fit=pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit = pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=5)
summary(pcr.fit)
set.seed(1)
pls.fit <- pslr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
set.seed(1)
pls.fit <- plsr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
summary(pls.fit)
set.seed(1)
pls.fit <- plsr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
summary(pls.fit)
pls.pred <- predict(pls.fit,x[test,],ncomp=10)
mean((pls.pred-y.test)^2)
set.seed(1)
pls.fit <- plsr(Apps~., data=college, subset=train, scale=TRUE, validation="CV")
summary(pls.fit)
pls.pred <- predict(pls.fit,x[test,],ncomp=10)
mean((pls.pred-y.test)^2)
pls.fit=plsr(Apps~.,data=college,scale=TRUE,ncomp=10)
summary(pls.fit)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=5)
summary(pcr.fit)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=5)
library(pls)
set.seed(2)
pcr.fit <- pcr(Apps~.,data=college,scale=TRUE,validation="CV")
summary(pcr.fit)
set.seed(1)
pcr.fit <- pcr(Apps~., data=college, subset=train,scale=TRUE, validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred <- predict(pcr.fit,x[test,],ncomp=12)
mean((pcr.pred-y.test)^2)
pcr.fit <- pcr(y~x,scale=TRUE,ncomp=12)
summary(pcr.fit)
lm.fit=lm(Apps~.,data=college,subset=train)
lm.fit
lm.pred=predict(lm.fit,college.test)
mean(lm.pred != Apps.test)
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
ridge.pred <- predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
